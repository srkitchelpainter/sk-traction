<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sitecore.Logging.Client</name>
    </assembly>
    <members>
        <member name="P:JSNLog.Exceptions.ClientException.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="M:JSNLog.Exceptions.ClientException.SetStackTrace(System.String)">
            <summary>
            Gets or sets the full client message.
            </summary>
            <value>
            The full client message.
            </value>
        </member>
        <member name="T:JSNLog.Infrastructure.AttributeInfo">
            <summary>
            Describes a tag attribute
            </summary>
        </member>
        <member name="T:JSNLog.Infrastructure.AttributeValueCollection">
            <summary>
            A collection of Values, each identified by a key (that is, its name)
            </summary>
        </member>
        <member name="M:JSNLog.Infrastructure.ConfigProcessor.ProcessRoot(System.Xml.XmlElement,System.String,System.Text.StringBuilder)">
            <summary>
            Processes a configuration (such as the contents of the jsnlog element in web.config).
            
            The configuration is processed into JavaScript, which configures the jsnlog client side library.
            </summary>
            <param name="requestId">
            requestId to be passed to the JSNLog library when setting its options.
            Could be null (when user didn't provide a request id).
            In that case, this method creates a request id itself.
            </param>
            <param name="xe">
            XmlElement to be processed
            </param>
            <param name="sb">
            All JavaScript needs to be written to this string builder.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.ConfigProcessor.AddAssemblyTagInfos(System.Reflection.Assembly)">
            <summary>
            Calls Init on all classes in the given assembly that implement IElement.
            Adds their TagInfos to the end of topLeveltagInfos.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:JSNLog.Infrastructure.IElement">
            <summary>
            Each element (logger, appenders, etc) that can appear in the jsnlog element in web.config
            is represented by a class implementing this interface.
            
            The only exception to this is the assembly element.
            
            To add an assembly with new elements:
            1) Create new project, with class(es) deriving from IElement. It will reference jsnlog.dll to get this interface and library methods.
            2) Add reference to new project to the project with the web site (not jsnlog.dll)
            3) Add assembly tags within the jsnlog tag. Set their name attribute to the name of the new assembly. 
            JSNLog will read the assemblies and read the new elements.
            </summary>
        </member>
        <member name="M:JSNLog.Infrastructure.IElement.Init(JSNLog.Infrastructure.XmlHelpers.TagInfo@)">
            <summary>
            When an assembly element is processed, all classes in that assembly implementing this interface
            are instanteated. Then their Init methods are called.
            </summary>
            <param name="tagInfo">
            Describes the new element. This will be added to the end of the list of tagInfos to be processed.
            This means that you can determine the order in which each type of element is processed
            via their assembly elements.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateJson(JSNLog.Infrastructure.AttributeValueCollection)">
            <summary>
            Generates the JavaScript for a JSON object.
            </summary>
            <param name="optionValues"></param>
            <returns>
            JS code with the JSON object.
            </returns>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateSetOptions(System.String,JSNLog.Infrastructure.AttributeValueCollection,System.Text.StringBuilder)">
            <summary>
            Generates the JavaScript to set options on an object
            </summary>
            <param name="parentName">
            Name of the JavaScript variable that holds the object.
            </param>
            <param name="optionValues">
            The names and values of the options.
            </param>
            <param name="sb">
            The JavaScript code is added to this StringBuilder.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateCreate(System.String,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generates the JavaScript create an object.
            </summary>
            <param name="objectVariableName"></param>
            <param name="createMethodName"></param>
            <param name="name">
            Name of the object as known to the user. For example the appender name.
            </param>
            <param name="sb"></param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateLogger(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generate the JavaScript to create a logger. 
            </summary>
            <param name="loggerVariableName">
            New logger object will be assigned to this JS variable.
            </param>
            <param name="loggerName">
            Name of the logger. Could be null (for the root logger).
            </param>
            <param name="sb">
            JS code will be appended to this.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.IntToLevel(System.Int32)">
            <summary>
            Converts a number to a level.
            
            Each level is associated with a value. If the number is equal to or lower than a level, but higher than the previous level, than 
            that level is used. So if:
            
            TRACE = 1000,
            DEBUG = 2000,
            INFO = 3000,
            WARN = 4000,
            ERROR = 5000,
            FATAL = 6000
            
            And the number is: 2500, than this method returns INFO.
            
            If the number is greater than FATAL (highest level), than FATAL is returned.
            If the number is lower than TRACE, than TRACE is returned.
            
            This method assumes that the Constants.Level enum is sorted by value!
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.HighestLevel">
            <summary>
            Returns the highest level
            as given in Constants.Level enum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.ParseLevel(System.String)">
            <summary>
            Parses a string with the name or value of a level.
            </summary>
            <param name="levelString"></param>
            <returns>
            null if levelString is null.
            Otherwise, the actual level.
            </returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.PredefinedName(System.String)">
            <summary>
            Returns the friendly name of the given level if possible.
            
            If level is a number matching one of the predefined levels, that level's name is returned.
            Otherwise, level is returned.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.LevelNumber(System.String)">
            <summary>
            Determines the numeric value of a level.
            If level is a number, returns the number.
            If level is a predefined level name, returns number corresponding to that level.
            Otherwise throws exception.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.LevelRegex">
            <summary>
            Returns a regex that matches a string with a level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.NamedLevels">
            <summary>
            Returns a string with all named levels, separated by |
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LogMessageHelpers.IsJsonString(System.String)">
            <summary>
            Returns true if the msg contains a valid JSON string.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LogMessageHelpers.EnsureValidJson(System.String)">
            <summary>
            Takes a log message and finds out if it contains a valid JSON string.
            If so, returns it unchanged.
            
            Otherwise, surrounds the string with quotes (") and escapes the string for JavaScript.
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.CreateNewRequestId">
            <summary>
            Creates an ID that is unique hopefully.
            
            This method initially tries to use the request id that IIS already uses internally. This allows us to correlate across even more log files.
            If this fails, for example if this is not part of a web request, than it uses a random GUID.
            
            See
            http://blog.tatham.oddie.com.au/2012/02/07/code-request-correlation-in-asp-net/
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.Get">
            <summary>
            Gets an id, that is unique to this request. 
            That is, for the same request, this method always returns the same string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.GetFromRequest">
            <summary>
            Gets the request id from an HTTP header in the request.
            Every log request sent by jsnlog.js should have such a header.
            However, requests not sent by jsnlog.js will not have this header obviously.
            
            If the request id cannot be found, returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JSNLog.Infrastructure.SpamFilter">
            <summary>
            This class allows to prevent spam attacks to the logging system.
            </summary>
        </member>
        <member name="P:JSNLog.Infrastructure.SpamFilter.Loggers">
            <summary>
            Gets the loggers.
            </summary>
            <value>
            The loggers.
            </value>
        </member>
        <member name="P:JSNLog.Infrastructure.SpamFilter.MaxMessages">
            <summary>
            Gets the maximum messages.
            </summary>
            <value>
            The maximum messages.
            </value>
        </member>
        <member name="P:JSNLog.Infrastructure.SpamFilter.MaxMessageLength">
            <summary>
            Gets the maximum length of the message.
            </summary>
            <value>
            The maximum length of the message.
            </value>
        </member>
        <member name="M:JSNLog.Infrastructure.SpamFilter.RegisterRequestId(System.String)">
            <summary>
            Registers the request identifier.
            </summary>
            <param name="requestId">The request identifier.</param>
        </member>
        <member name="M:JSNLog.Infrastructure.SpamFilter.FilterLogMessages(System.String,System.Collections.Generic.List{JSNLog.LogHandling.LoggerProcessor.LogData})">
            <summary>
            Filters the log messages.
            </summary>
            <param name="requestId">The request identifier.</param>
            <param name="logDatas">The log datas.</param>
        </member>
        <member name="M:JSNLog.Infrastructure.Utils.ProcessOptionAttributes(System.String,System.Xml.XmlElement,System.Collections.Generic.IEnumerable{JSNLog.Infrastructure.AttributeInfo},JSNLog.Infrastructure.AttributeValueCollection,System.Text.StringBuilder,System.Action{JSNLog.Infrastructure.AttributeValueCollection})">
            <summary>
            Generates the JavaScript for the call to setOptions to set the options for an object
            (the JL object itself, an appender or a logger).
            </summary>
            <param name="parentName">
            JavaScript variable that holds the element.
            </param>
            <param name="xe">
            XML element. The attributes on this element will provide the values for the options.
            </param>
            <param name="attributeInfos">
            Describes which attributes to use as options and how to validate them.
            
            As regards attributeInfos that have a SubTagName:
            * The value of such an attribute is an array, for example [ 'a', 'b' ]
            * If there are no child elements with the given sub tag name, there is no value, and no entry for that attributeinfo in 
              the generated setOption.
            * If there is only one child element and it does not have an attribute, the value is an empty array [].
            </param>
            <param name="initialAttributeValues">
            Initial attribute values. The elements found in xe will be added to this.
            If null, this method will create an empty collection itself.
            </param>
            <param name="sb">
            The JS code is added to this.
            </param>
            <param name="validate">
            If not null, this method is called on the generated attribute values. This can be used to throw an exception
            if the given parameters are not valid.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.Utils.UtcToLocalDateTime(System.DateTime)">
            <summary>
            Takes a DateTime in UTC and returns the same timestamp in local time.
            </summary>
            <param name="utcTime"></param>
            <returns></returns>
        </member>
        <member name="T:JSNLog.Infrastructure.Value">
            <summary>
            Holds either a single piece of string, or a collection of strings. 
            These would be the values of xml attributes.
            You can only have either a string or a collection.
            
            Also holds a ValueInfo object describing how to process each string.
            </summary>
        </member>
        <member name="P:JSNLog.Infrastructure.Value.Text">
            <summary>
            The (unescaped) text representing the value
            </summary>
        </member>
        <member name="P:JSNLog.Infrastructure.Value.TextCollection">
            <summary>
            The (unescaped) string collection representing the value
            </summary>
        </member>
        <member name="P:JSNLog.Infrastructure.Value.ValueInfo">
            <summary>
            Info about the value
            </summary>
        </member>
        <member name="P:JSNLog.Infrastructure.XmlHelpers.RootElement">
            <summary>
            Gets or sets the root element.
            </summary>
            <value>
            The root element.
            </value>
            <exception cref="T:JSNLog.Exceptions.MissingRootTagException"></exception>
            <exception cref="T:JSNLog.Exceptions.UnknownRootTagException"></exception>
        </member>
        <member name="T:JSNLog.Infrastructure.XmlHelpers.XmlElementProcessor">
            <summary>
            A method that processes an actual xml element.
            </summary>
            <param name="xe">
            The element.
            
            If this is null, no elements of the given type were found.
            In that case, the method gets called so it can provide default values.
            
            For example, if no appender-refs are defined for a logger, we want to generate JavaScript code
            to create a default AjaxAppender and attach that to the logger.
            </param>
            <param name="parentName">
            Name of the parent element. This is not the name of an XML element.
            Instead, the parent will be worked into a JavaScript object and that object assigned to a JavaScript variable.
            This is the name of that JavaScript variable.
            </param>
            <param name="appenderNames">
            Only relevant to some methods.
            
            This is the collection of the names of all appenders.
            The key is the name of the appender (as set by the "name" attribute in the appender tag).
            The value is the the name of the JavaScript variable to which the appender gets assigned.
            </param>
            <param name="sequence">
            Used to get a unique ever increasing number if needed.
            </param>
            <param name="attributeInfos">
            The attributes expected by this element.
            </param>
            <param name="sb">
            The result of processing an xml element will be some text that should be injected in the page.
            This text will be appended to this StringBuilder.
            </param>
        </member>
        <member name="T:JSNLog.Infrastructure.XmlHelpers.TagInfo">
            <summary>
            Associates a tag name (such as "logger") with the processor that handles a "logger" xml element.
            </summary>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.ProcessNodeList(System.Xml.XmlNodeList,System.Collections.Generic.List{JSNLog.Infrastructure.XmlHelpers.TagInfo},System.String,System.Collections.Generic.Dictionary{System.String,System.String},JSNLog.Infrastructure.Sequence,System.Text.StringBuilder,System.String)">
            <summary>
            Processes a list of nodes. All XmlElements among the nodes are processed,
            any other types of nodes (comments, etc.) are ignored.
            </summary>
            <param name="xmlNodeList">
            The list of nodes
            </param>
            <param name="tagInfos">
            Specifies all tags (= node names) that are permissable. You get an exception if there is a node
            that is not listed here. However, see childNodeNameRegex.
            
            The nodes are not listed in the order in which they appear in the list. Instead, first all nodes
            with the name listed in the first TagInfo in tagInfos are processed. Then those in the second TagInfo, etc.
            
            This way, you can for example first process all appenders, and then all loggers.
            
            If there are no nodes at all for a tag name given in tagInfo, the 
            XmlElementProcessor given in the tagInfo is called once with a null XmlElement.
            </param>
            <param name="context">parentName, appenderNames, sequence and sb get passed to the processor method that is listed for each tag in tagInfos.</param>
            <param name="sequence"></param>
            <param name="sb"></param>
            <param name="childNodeNameRegex">
            If this is given, then only those nodes in xmlNodeList whose name matches childNodeNameRegex will be processed.
            The other nodes will be completely ignored.
            
            If this is not given, no filtering takes place and all nodes are processed.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.EnsureAllAttributesKnown(System.Xml.XmlElement,System.Collections.Generic.IEnumerable{JSNLog.Infrastructure.AttributeInfo})">
            <summary>
            Ensures that all attributes of xe are actually in attributeInfos.
            If not, an exception is thrown.
            </summary>
            <param name="xe"></param>
            <param name="attributeInfos"></param>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.ProcessAttributes(System.Xml.XmlElement,System.Collections.Generic.IEnumerable{JSNLog.Infrastructure.AttributeInfo},JSNLog.Infrastructure.AttributeValueCollection)">
            <summary>
            Reads the attributes of xe and adds their names and values to attributeValues.
            
            Validates the attributes based on the contents of attributeInfos. Attributes that have been
            listed as Ignore will not be added to attributeValues.
            
            As regards attributeInfos that have a SubTagName:
            * If there are no child elements with that sub tag name, than nothing will be added to attributeValues.
            * If there is a child element, but it has no attribute, than no value will be added to the collection of
              values of that sub tag. This means that if there is only one child element and it has no attribute,
              you get an empty collection.
            </summary>
            <param name="xe"></param>
            <param name="attributeInfos"></param>
            <param name="attributeValues">
            key: attribute name
            value: value of the attribute. Cannot be null.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.SubTagValues(System.Xml.XmlElement,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds all child elements of xe with tag subTagName. These child elements can have an attribute
            with name attributeName.
            
            The values of those attributes are returned in a collection.
            The values must match ValidValueRegex (otherwise exception).
            
            If there are no child elements, returns null.
            If a child element does not have an attribute, no value is added to the collection for that child element.
            This allows the user to create an empty collection (as opposed to null - meaning no collection).
            
            Each child element can have at most one attribute!
            
            Note that xe may legitamitly have child elements with tags different from subTagName.
            </summary>
            <param name="xe"></param>
            <param name="subTagName"></param>
            <param name="attributeName"></param>
            <param name="required">
            True if there must be at least one child element with tag subTagName.
            </param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.RequiredAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Returns the value of an attribute of an XmlElement.
            If the attribute is not found, an exception is thrown.
            
            If a validValueRegex is given, then if the value is not null and does not match the regex,
            an exception is thrown.
            </summary>
            <param name="xe"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.OptionalAttribute(System.Xml.XmlElement,System.String,System.String,System.String)">
            <summary>
            Returns the value of an attribute of an XmlElement.
            If the attribute is not found, the default value is returned.
            
            If a validValueRegex is given, then if the value is not null and does not match the regex,
            an exception is thrown.
            </summary>
            <param name="xe"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.JavascriptLogging.Configure(System.String)">
            <summary>
            Call this method for every request to generate a script tag with JavaScript
            that configures all loggers and appenders, based on the jsnlog element in the web.config.
            </summary>
            <param name="requestId">
            Request Id to be included in all logging requests sent by jsnlog.js from the client.
            If null, a new request id will be generated (the same one that will be returned from RequestId method).
            </param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.JavascriptLogging.RequestId">
            <summary>
            Returns a request id that is unique to this request.
            
            However, if the request is a log request from jsnlog.js, than this method returns the requestId travelling 
            in the request.
            
            The site can call this method to get the request id for use in server side logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.JavascriptLogging.SetRootElement(System.Xml.XmlElement)">
            <summary>
            Sets the root element.
            </summary>
            <param name="rootElement">The rootElement.</param>
        </member>
        <member name="T:JSNLog.LogHandling.LoggerProcessor.LogRequestData">
            <summary>
            The log data sent in a single log request from the client.
            It is expected that this list has 2 items:
            * the requestId (key: r)
            * the array with log items (key: lg)
            </summary>
        </member>
        <member name="M:JSNLog.LogHandling.LoggerProcessor.ProcessLogRequestExec(System.String,System.String,System.DateTime,System.String,System.String,System.Xml.XmlElement)">
            <summary>
            Processes a request with logging info. Unit testable.
            
            Returns log info in easily digestable format.
            </summary>
            <param name="json">JSON sent from client by AjaxAppender</param>
            <param name="serverSideTimeUtc">Current time in UTC</param>
            <param name="url">Url of the log request</param>
            <param name="requestId">requestId taken from the log request</param>
            <param name="xe">The JSNLog element in web.config</param>
        </member>
        <member name="M:JSNLog.LogHandling.LoggerProcessor.SafeGet(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Returns the value associated with a key in a dictionary.
            If the key is not present, returns the default value - rather than throwing an exception.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:JSNLog.ValueInfos.IValueInfo">
            <summary>
            This describes a class that describes how to handle values.
            </summary>
        </member>
        <member name="P:JSNLog.ValueInfos.IValueInfo.ValidValueRegex">
            <summary>
            The value (without escaping) must match this regex.
            Return null if there is no regex (so no need to do any checking).
            </summary>
        </member>
        <member name="M:JSNLog.ValueInfos.IValueInfo.ToJavaScript(System.String)">
            <summary>
            Takes a value and converts it to a JavaScript value.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
    </members>
</doc>
